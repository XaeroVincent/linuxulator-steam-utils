#!/usr/bin/env ruby
# encoding: UTF-8

require 'fileutils'
require 'json'

raise 'Don\'t run this script as root!' if `id -u`.chomp == '0'

I386_PKG_ROOT  = ENV['LSU_i386_PKG_ROOT'] || File.join(ENV['HOME'], '.i386-wine-pkg')
PROTON_VERSION = '5.13'

def set_up_file(path)
  if not File.exist?(path)
    yield path
    if not File.exist?(path)
      raise "Failed to create/download #{path}"
    end
  end
end

def find_proton_dir

  library_folders = [File.join(ENV['HOME'], '.steam/steam')]

  vdf = File.read(File.join(ENV['HOME'], '.steam/steam/steamapps/libraryfolders.vdf'))
    .gsub(/"(?=\t+")/, '":').gsub(/"(?=\n\{)/, '":').gsub(/"(?=\n\t+")/, '",')

  for key, value in JSON.parse("{#{vdf}}")['LibraryFolders']
    library_folders << value if key =~ /^\d+$/
  end

  library_folders.map{|dir| File.join(dir, "steamapps/common/Proton #{PROTON_VERSION}")}.find{|dir| File.exist?(dir)}
end

Dir.chdir(File.join(ENV['HOME'], '.steam/steam/compatibilitytools.d')) do

  set_up_file('FreeBSD_Proton') do
    FileUtils.mkdir_p('FreeBSD_Proton')
  end

  Dir.chdir('FreeBSD_Proton') do

    set_up_file('compatibilitytool.vdf') do

      str = <<~E
        "compatibilitytools"
        {
          "compat_tools"
          {
            "FreeBSD_Proton"
            {
              "install_path" "."
              "display_name" "emulators/wine-proton"
              "from_oslist"  "windows"
              "to_oslist"    "linux"
            }
          }
        }
      E

      File.write('compatibilitytool.vdf', str)
    end

    set_up_file('toolmanifest.vdf') do

      str = <<~E
        "manifest"
        {
          "version" "2"
          "commandline" "/run.sh %verb%"
        }
      E

      File.write('toolmanifest.vdf', str)
    end

    set_up_file('run.sh') do

      str = <<~E
        #!/bin/sh
        dir="$(dirname "$(realpath "$0")")"
        export PROTON_LIB32="$dir/proton/dist/lib"
        export PROTON_LIB64="$dir/proton/dist/lib64"
        exec lsu-proton "$dir/proton/proton" "$@"
      E

      File.write('run.sh', str)
      File.chmod(0700, 'run.sh')
    end

    proton_dir = find_proton_dir()
    raise "Can't find Proton #{PROTON_VERSION} directory" if not proton_dir

    set_up_file("proton_#{PROTON_VERSION}") do |target|
      FileUtils.mkdir_p(target)
    end

    system("ln -sf -h proton_#{PROTON_VERSION} proton")

    Dir.chdir("proton_#{PROTON_VERSION}") do

      for file in %w(filelock.py user_settings.sample.py LICENSE LICENSE.OFL proton_3.7_tracked_files version)
        set_up_file(file) do
          FileUtils.cp(File.join(proton_dir, file), '.')
        end
      end

      set_up_file('proton') do
        FileUtils.cp(File.join(proton_dir, 'proton'), '.')
        system('sed', '-i.bak', '-e', 's/g_proton.wine_bin, "steam"/g_proton.wine_bin/', 'proton') #TODO: this shouldn't be necessary
      end

      set_up_file('dist') do

        FileUtils.mkdir_p('dist')

        system('tar', '-C', 'dist', '-xf', File.join(proton_dir, 'proton_dist.tar'),
          'lib/libsteam_api.so',
          'lib*/wine/dxvk',
          'lib*/wine/fakedlls/vrclient*.dll',
          'lib*/wine/fakedlls/dxgi*.dll',
          'lib*/wine/vkd3d-proton',
          'lib*/wine/*steam*',
          'lib*/wine/d3d9.dll',
          'lib*/wine/d3d1*.dll',
          'share/default_pfx',
          'version')

        FileUtils.cp('version', 'dist/version') # "1605016168 proton-5.13-2" vs "1605016168 proton-5.13-2-rc3"
      end

      set_up_file('dist/bin') do |target|
        FileUtils.mkdir_p(target)
      end

      set_up_file('dist/bin/wine') do |target|
        FileUtils.ln_sf(File.join(I386_PKG_ROOT, 'usr/local/wine-proton/bin/wine'), target)
      end

      set_up_file('dist/bin/wine64') do |target|
        FileUtils.ln_sf('/usr/local/wine-proton/bin/wine64', target)
      end

      set_up_file('dist/bin/wineserver') do |target|
        FileUtils.ln_sf('/usr/local/wine-proton/bin/wineserver', target)
      end

      set_up_file('dist/lib/gstreamer-1.0') do |target|
        system('ln', '-sf', '-h', File.join(I386_PKG_ROOT, 'usr/local/lib/gstreamer-1.0'), target)
      end

      set_up_file('dist/lib64/gstreamer-1.0') do |target|
        system('ln', '-sf', '-h', '/usr/local/lib/gstreamer-1.0', target)
      end
    end

  end # FreeBSD_Proton
end # compatibilitytools.d
