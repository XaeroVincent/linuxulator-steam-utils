#!/usr/bin/env ruby
# encoding: UTF-8

require 'fileutils'
require_relative '.dpkgs'
require_relative '.utils'

SLR_NAME_OR_PATH = ARGV[0] || 'SteamLinuxRuntime_sniper'

reqs = []

EMUL_PATH = File.realdirpath(`sysctl -qn compat.linux.emul_path`).chomp
if not EMUL_PATH =~ /\/compat\/\w[\w\d]*/
  reqs << "This script doesn't like your compat.linux.emul_path."
end

SLR_DIR = File.basename(SLR_NAME_OR_PATH)
if not SLR_DIR =~ /SteamLinuxRuntime_\w+/
  reqs << "Expected the directory name starting with SteamLinuxRuntime_."
end

if `sysctl -nq vfs.usermount`.to_i != 1
  reqs << "This script requires vfs.usermount=1."
end

if not system('kldstat -q -m nullfs')
  reqs << "nullfs.ko must be loaded."
end

steam_linux_runtime_path = SLR_NAME_OR_PATH.start_with?('/') ? SLR_NAME_OR_PATH : find_steamapp_dir(SLR_DIR)
if not steam_linux_runtime_path
  reqs << "Can't find #{SLR_DIR}."
end

if reqs.size > 0
  for msg in reqs
    STDERR.puts msg
  end
  exit(1)
end

platform = Dir[File.join(steam_linux_runtime_path, "#{SLR_DIR.delete_prefix('SteamLinuxRuntime_')}_platform_*")].first
raise if not platform

download_debs(DPKGS, LSU_DIST_PATH)

init_tmp_dir()
mroot = File.join(LSU_TMPDIR_PATH, SLR_DIR)
FileUtils.mkdir_p(mroot)

#TODO: there might be mount points under $HOME
#TODO: STEAM_COMPAT_* env vars
mounts = []
if try_mount('tmpfs', 'tmpfs', mroot, 'nocover')
  mounts << mroot
  begin
    # SteamLinuxRuntime
    FileUtils.mkdir_p(File.join(mroot, 'usr'))
    system('sh', '-c', 'tar --cd "$0" -c @../usr-mtree.txt.gz | tar --cd "$1" -x', '-', File.join(platform, 'files'), File.join(mroot, 'usr')) || raise
    system('chmod', '-R', 'u+rwX', mroot) || raise
    FileUtils.mv(File.join(mroot, 'usr/etc'), File.join(mroot, 'etc')) # ?

    # additional packages we'd like to have
    extract_debs(DPKGS, LSU_DIST_PATH, mroot)

    FileUtils.ln_s('usr/bin', File.join(mroot, 'bin')) # ?

    # basic mount point setup
    mounts << mount('linprocfs', 'linprocfs', File.join(mroot, 'proc'))
    mounts << mount('linsysfs',  'linsysfs',  File.join(mroot, 'sys'))
    mounts << mount('devfs',     'devfs',     File.join(mroot, 'dev'))
    mounts << mount('nullfs',    '/tmp',      File.join(mroot, 'tmp'))     # X11
    mounts << mount('nullfs',    '/var/run',  File.join(mroot, 'var/run')) # Wayland (?)

    # we can't mount anything over devfs from a non-root user,
    # let's abuse emul_path redirection instead
    mounts << mount('fdescfs', 'fdescfs',                       File.join(mroot, EMUL_PATH, 'dev/fd'), 'linrdlnk')
    mounts << mount('nullfs',  File.join(EMUL_PATH, 'dev/shm'), File.join(mroot, EMUL_PATH, 'dev/shm'))

    # basic configuration
    FileUtils.cp('/etc/group',       File.join(mroot, 'etc/'))
    FileUtils.cp('/etc/hosts',       File.join(mroot, 'etc/'))
    FileUtils.cp('/etc/machine-id',  File.join(mroot, 'etc/')) # dbus
    FileUtils.cp('/etc/passwd',      File.join(mroot, 'etc/')) # getpwuid_r()
    FileUtils.cp('/etc/resolv.conf', File.join(mroot, 'etc/')) # dns

    # placing $HOME under emul_path avoids some redirection issues
    # with Counter-Strike 2, Torchlight 2
    home_dir = File.realpath(ENV['HOME'])
    raise if !(home_dir =~ /^(\/usr|)\/home\//)
    mounts << mount('nullfs', home_dir, File.join(mroot, home_dir.gsub(/^\/usr\/home\//, '/home/')))
    mounts << mount('nullfs', home_dir, File.join(mroot, EMUL_PATH, home_dir.gsub(/^\/usr\/home\//, '/home/')))
    FileUtils.ln_s('/home', File.join(mroot, 'usr/home'))

    # additional directories
    if ENV['STEAM_COMPAT_MOUNTS']
      dirs = ENV['STEAM_COMPAT_MOUNTS']
        .split(':')
        .find_all{|dir| dir.start_with?('/')}
        .map     {|dir| File.realpath(dir)}
        .find_all{|dir| (dir.start_with?(home_dir) && dir != home_dir) ||
          !(dir =~ /^\/(app|bin|boot|compat|dev|etc|home|lib|lib32|lib64|libexec|proc|rescue|root|run|sbin|sys|tmp|usr|var|zroot)\//)}
      for dir in dirs
        mounts << mount('nullfs', dir, File.join(mroot, EMUL_PATH, dir), 'nocover')
      end
    end

    # LSU's lib32/lib64 dirs
    #TODO: mount this to /app or some other non-shareable path
    lsu_dir = File.realpath(File.join(__dir__, '..'))
    mounts << mount('nullfs', lsu_dir, File.join(mroot, lsu_dir))

    # Nvidia libs
    for source_dir, dest_dir in {
      File.join(EMUL_PATH, 'usr/lib64') => File.join(mroot, 'usr/lib/x86_64-linux-gnu'),
      File.join(EMUL_PATH, 'usr/lib')   => File.join(mroot, 'usr/lib/i386-linux-gnu')
    }
      libs = Dir[File.join(source_dir, 'lib{nvidia-*.so*,GLX_nvidia*.so*}')]
      if libs.size > 0
        mounts << mount('nullfs', source_dir, File.join(dest_dir, '.nvidia'))
        for path in libs
          FileUtils.ln_s(File.join('.nvidia', File.basename(path)), File.join(dest_dir, File.basename(path)))
        end
      end
    end

    if File.exist?('/usr/local/share/vulkan/icd.d/nvidia_icd.json')
      FileUtils.cp('/usr/local/share/vulkan/icd.d/nvidia_icd.json', File.join(mroot, 'etc/vulkan/icd.d/'))
    end

    # sound
    FileUtils.rm_r(File.join(mroot, 'etc/alsa'))
    FileUtils.cp(File.join(EMUL_PATH, 'etc/asound.conf'), File.join(mroot, 'etc/'))
    FileUtils.cp(File.join(EMUL_PATH, 'usr/lib64/alsa-lib/libasound_module_ctl_oss.so'), File.join(mroot, 'usr/lib/x86_64-linux-gnu/alsa-lib/'))
    FileUtils.cp(File.join(EMUL_PATH, 'usr/lib64/alsa-lib/libasound_module_pcm_oss.so'), File.join(mroot, 'usr/lib/x86_64-linux-gnu/alsa-lib/'))
    FileUtils.cp(File.join(EMUL_PATH, 'usr/lib/alsa-lib/libasound_module_ctl_oss.so'),   File.join(mroot, 'usr/lib/i386-linux-gnu/alsa-lib/'))
    FileUtils.cp(File.join(EMUL_PATH, 'usr/lib/alsa-lib/libasound_module_pcm_oss.so'),   File.join(mroot, 'usr/lib/i386-linux-gnu/alsa-lib/'))
    mounts << mount('nullfs', File.join(EMUL_PATH, 'usr/share/alsa'), File.join(mroot, 'usr/share/alsa'))

    # glxgears
    if File.exist?(File.join(EMUL_PATH, 'bin/glxgears'))
      FileUtils.cp(File.join(EMUL_PATH, 'bin/glxgears'), File.join(mroot, 'usr/bin/'))
    end

    # eON workaround
    for i in 0..64 do
      FileUtils.mkdir_p(File.join(mroot, EMUL_PATH, "sys/devices/system/cpu/cpu#{i}/topology/")) # ?
      File.write(File.join(mroot, EMUL_PATH, "sys/devices/system/cpu/cpu#{i}/topology/core_id"), i.to_s)
    end
  rescue
    for path in mounts.reverse
      system('umount', '-f', path)
    end
    raise
  end
else
  STDERR.puts "Assuming #{mroot} is already set up."
end
